/*
 * Copyright (c) 2020, J2 Innovations. All Rights Reserved
 */

import * as fs from 'fs'
import * as path from 'path'
import { HUnit } from 'haystack-core'

const UNITS_TS = 'src/index.ts'
const VERSION_TS = 'src/version.ts'

const WARNING = `
/**
 * This file is automatically generated during the build process.
 *
 * Please do not manually edit this file!
 */
`

/**
 * Build the units TypeScript file from `units.txt`.
 *
 * @param text The text to parse.
 * @returns The content of the units TypeScript file.
 */
function generateUnitsTypeScript(text: string): string {
	let quantity = ''

	return `
${WARNING}

import { HUnit } from 'haystack-core'

${HUnit.parseDatabase(text)
	.map((data): string => {
		let prefix = ''

		if (quantity !== data.quantity && data.quantity) {
			quantity = data.quantity
			prefix = `\n// ${quantity}\n`
		}

		return `${prefix}export const ${data.ids[0].replace(
			/_.?/g,
			(s) => s[1]?.toUpperCase() ?? ''
		)} = HUnit.define(${JSON.stringify(data)})`
	})
	.join('\n')}`
}

/**
 * Generate the version information for the unit database generation.
 *
 * @returns The content of the version TypeScript file.
 */
function generateVersionTypeScript(): string {
	return `
${WARNING}

export const version = '${Date.now()}'`
}

/**
 * Dynamically build `/src/core/units/db.ts` file from `./units.txt`.
 */
async function buildUnits(): Promise<void> {
	console.log(`Building '${UNITS_TS}'`)

	const unitsTs = generateUnitsTypeScript(
		fs.readFileSync(path.join(__dirname, 'units.txt')).toString('utf8')
	)

	fs.writeFileSync(
		path.join(__dirname, `../${UNITS_TS}`),
		Buffer.from(unitsTs)
	)

	const versionTs = generateVersionTypeScript()

	fs.writeFileSync(
		path.join(__dirname, `../${VERSION_TS}`),
		Buffer.from(versionTs)
	)

	console.log(`Successfully built '${UNITS_TS}' and '${VERSION_TS}'`)
}

buildUnits()
